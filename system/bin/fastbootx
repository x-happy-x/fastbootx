#!/system/bin/sh

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/vendor/lib64
bootctl="bootctl.bin"
block_by_name="/dev/block/by-name/"

help() {
    echo "Usage: fastbootx [COMMAND] ..."
    echo "Available commands:"
    echo "    flash or -f:      Writes an image to the specified partition."
    echo "    erase or -e:      Erases a partition."
    echo "    backup or -b:     Creates a backup of a partition."
    echo "    slot or -s:       Sets the active boot slot."
    echo "    bootctl or -bc:   Executes the bootctl command with specified arguments."
    echo "    partitions, parts or -ps: Displays a list of partitions."
    echo "    partition, part or -p:    Displays information about a partition."
}

flash_help() {
    echo "Usage: fastbootx flash [PARTITION] [OPTIONS] [FILE]"
    echo "Available options:"
    echo "    -b backup_file_path:             Creates a backup of the flashed partition at the specified backup_file_path."
    echo "    -o:                                 Flashes the image to the opposite slot (if slots are used)."
    echo "    -y:                                 Confirms the operation without prompting."
    echo "    -r:                                 Reboots after flashing the image."
}

erase_help() {
    echo "Usage: fastbootx erase [PARTITION] [OPTIONS]"
    echo "Available options:"
    echo "    -b backup_file_path:             Creates a backup of the erased partition at the specified backup_file_path."
    echo "    -o:                                 Erases the partition on the opposite slot (if slots are used)."
    echo "    -y:                                 Confirms the operation without prompting."
    echo "    -r:                                 Reboots after erasing the partition."
}

backup_help() {
    echo "Usage: fastbootx backup [PARTITION] [OPTIONS] [FILE]"
    echo "Available options:"
    echo "    -o:                                 Creates a backup of the partition in the opposite slot (if slots are used)."
    echo "    -y:                                 Confirms the operation without prompting."
    echo "    -r:                                 Reboots after creating the backup."
}

slot_help() {
    echo "Usage: fastbootx slot [OPTIONS] [SLOT]"
    echo "Available values for SLOT:"
    echo "        number - prints the slot number (0 or 1)."
    echo "        suffix - prints the slot suffix (_a or _b)."
    echo "        other - activates the opposite slot."
    echo "        0 or 1 - slot number to activate."
    echo "Available options:"
    echo "    -o:                                 Switches to the opposite slot."
    echo "    -p:                                 Prints a message about the current slot."
    echo "    -y:                                 Confirms the operation without prompting."
    echo "    -r:                                 Reboots after changing the slot."
}

partition_help() {
    echo "Usage: fastbootx partition [PARTITION] [OPTIONS]"
    echo "Available options:"
    echo "    -p, --path:                       Displays the path to the partition."
    echo "    or other ls command flags (except -l, which is already used)."
}

partitions_help() {
    echo "Usage: fastbootx partitions [OPTIONS]"
    echo "Available options:"
    echo "    ls command flags."
}

file_exists() {
    [[ -f $1 ]]
}

partition_exists() {
    [[ -e $1 ]]
}

dir_exists() {
    [[ -d $1 ]]
}

is_not_link() {
    [[ ! -L $1 ]]
}

flash_partition() {
    local source_file=$1
    local target_partition=$2
    local target_partition_name=$3

    echo "[flash] $source_file -> $target_partition_name"
    dd if="$source_file" of="$target_partition"
}

erase_partition() {
    local source_file=$1
    local target_partition=$2
    local target_partition_name=$3

    echo "[erase] $target_partition_name"
    dd if="$source_file" of="$target_partition"
}

backup_partition() {
    local partition="$1"
    local backup_file="$2"
    local partition_name="$3"
    if dir_exists $(dirname "$backup_file") && is_not_link "$backup_file"; then
        echo "[backup] $partition_name -> $backup_file"
        dd if="$partition" of="$backup_file"
    else
        echo "Backup path is not valid"
        exit 1
    fi
}

current_slot=$($bootctl get-current-slot)
current_suffix=$($bootctl get-suffix $current_slot)
opposite_slot=$((1 - current_slot))
opposite_suffix=$($bootctl get-suffix $opposite_slot)

command="$1"
if [ "$command" = "help" ] || [ "$command" = "-h" ] || [ "$command" = "--help" ] || [ "$command" = "" ]; then
    help
    exit 0
fi
if [ "$command" = "flash" ] || [ "$command" = "-f" ]; then
    command="flash"
elif [ "$command" = "erase" ] || [ "$command" = "-e" ]; then
    command="erase"
elif [ "$command" = "backup" ] || [ "$command" = "-b" ]; then
    command="backup"
elif [ "$command" = "slot" ] || [ "$command" = "-s" ]; then
    command="slot"
elif [ "$command" = "bootctl" ] || [ "$command" = "-bc" ]; then
    command="bootctl"
elif [ "$command" = "partitions" ] || [ "$command" = "parts" ] || [ "$command" = "-ps" ]; then
    command="partitions"
elif [ "$command" = "partition" ] || [ "$command" = "part" ] || [ "$command" = "-p" ]; then
    command="partition"
fi

shift

if [ "$command" = "flash" ] || [ "$command" = "erase" ] || [ "$command" = "backup" ]; then

    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "" ]; then
        if [ "$command" = "flash" ]; then
            flash_help
        elif [ "$command" = "erase" ]; then
            erase_help
        elif [ "$command" = "backup" ]; then
            backup_help
        else
            help
        fi
        exit 0
    fi

    partition_name="$1"
    partition_path="$block_by_name$partition_name"
    current_partition="$partition_path$current_suffix"
    opposite_partition="$partition_path$opposite_suffix"

    if ! partition_exists $partition_path && ! partition_exists $current_partition; then
        echo "No such partition: $partition_path"
        exit 1
    fi

    if ! partition_exists $current_partition; then
        echo "The $partition_name partition is not divided into slots" 
        current_partition="$partition_path"
        opposite_partition="$partition_path"
        current_suffix=""
        opposite_suffix=""
    fi

    shift

    while getopts "b:oy" opt; do
      case ${opt} in
        b )
          backup_file="$OPTARG"
          ;;
        o )
          other_slot=1
          ;;
        r )
          reboot_after=1
          ;;
        y )
          confirm="y"
          ;;
        \? )
          echo "Invalid option: $OPTARG" 1>&2
          ;;
        : )
          echo "Invalid option: $OPTARG requires an argument" 1>&2
          ;;
      esac
    done

    shift $((OPTIND-1))

    if [ "$command" = "flash" ]; then
        new_partition="$1"
        if ! file_exists "$new_partition"; then
            echo "No such file $new_partition"
            exit 1
        fi
    elif [ "$command" = "erase" ]; then
        new_partition="/dev/zero"
    elif [ "$command" = "backup" ]; then
        if [[ ! "$backup_file" ]]; then
            backup_file="$1"
        fi
    fi

    flash_part="$([[ $other_slot ]] && echo $opposite_partition || echo $current_partition)"
    flash_part_name="$partition_name$([[ $other_slot ]] && echo $opposite_suffix || echo $current_suffix)"

    if [[ -z $confirm ]]; then
        echo "Are you sure you want to continue? (y/n)"
        read confirm
    fi

    if [ "$confirm" != "y" ]; then
        echo "Command cancelled"
        exit 1
    fi

    if [[ $backup_file ]]; then
        backup_partition "$flash_part" "$backup_file" "$flash_part_name"
    fi
    
    if [ "$command" = "flash" ]; then
        flash_partition "$new_partition" "$flash_part" "$flash_part_name"
    elif [ "$command" = "erase" ]; then
        erase_partition "$new_partition" "$flash_part" "$flash_part_name"
    fi
    
    if [[ $reboot_after ]]; then
        reboot
    fi
    
elif [ "$command" = "slot" ]; then

    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "" ]; then
        slot_help
        exit 0
    fi

    while getopts "oyr" opt; do
      case ${opt} in
        o )
          other_slot=1
          ;;
        p )
          print_slot=1
          ;;
        r )
          reboot_after=1
          ;;
        y )
          confirm="y"
          ;;
        \? )
          echo "Invalid option: $OPTARG" 1>&2
          ;;
        : )
          echo "Invalid option: $OPTARG requires an argument" 1>&2
          ;;
      esac
    done

    shift $((OPTIND-1))
       
    if [[ "$1" = "number" ]]; then
        echo "$([[ $other_slot ]] && echo $opposite_slot || echo $current_slot)"
        exit 0
    fi
    
    if [[ "$1" = "suffix" ]]; then
        echo "$([[ $other_slot ]] && echo $opposite_suffix || echo $current_suffix)"
        exit 0
    fi
    
    if [ "$1" = "other" ]; then
        other_slot=1
        shift
    fi
    
    if [[ $print_slot ]]; then
        echo "Current slot: $current_slot ($current_suffix)"
    fi
    
    if [[ -z $confirm ]]; then
        echo "Are you sure you want to continue? (y/n)"
        read confirm
    fi

    if [ "$confirm" != "y" ]; then
        echo "Command cancelled"
        exit 1
    fi
    
    $bootctl set-active-boot-slot $([[ $other_slot ]] && echo $opposite_slot || echo $1)
    
    if [[ $reboot_after ]]; then
        reboot
    fi
elif [ "$command" = "bootctl" ]; then
    $bootctl $*
elif [ "$command" = "partitions" ]; then
    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        partitions_help
        exit 0
    fi
    ls "$block_by_name" $*
elif [ "$command" = "partition" ]; then
    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        partition_help
        exit 0
    fi
    part_name="$1"
    part_path="$block_by_name$part_name"
    shift
    if ! partition_exists "$part_path"; then
        if [ "$1" = "--path" ] || [ "$1" = "-p" ]; then
            echo "$part_path"
        else 
            ls $part_path -l $* 
        fi
    else
        echo "No such partition: $part_name";
        exit 1
    fi
else
    echo "Unknown command: $command"
    exit 1
fi